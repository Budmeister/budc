Grammar for the Bud programming language
Version 0.2.0

Non-terminals:
S' (Start)
Is (Items)              [One or more functions, structs, imports, etc.]
I (Item)                [A function, struct, import, etc.]
F (FuncDecl)            [Function declaration]
S (StructDecl)          [Struct declaration]
Im (ImportDecl)         [File import]
P (Path)                [File path literal (no quotes) - "/"-separated Files]
Fi (File)               [id or id.id]
As (Args)               [Zero or more comma-separated VarDecls in parentheses]
Vsp (VarDeclsPar)       [VarDecls with parentheses]
Vs (VarDecls)           [Comma-separated VarDecls]
V (VarDecl)             [A type and a name (no assignment)]
E (Expr)                [assignment, declaration, function calls, array indexing, combinations, etc.]
Te (TypeExpr)           [Pointer types, arrays, etc.]
E2 (Expr2)              [One or more expressions in a row--for statement expressions]
Es (Exprs)              [One or more comma-separated expressions]
Nbe (NonBinExpr)        [An expression that is not a binary expression]
Ble (BlockExpr)         [An Expr2 in squiggly brackets]
Ae (AssignExpr)         [IdExpr = Expr;]
Va (VarDeclAssgn)       [Variable declaration and assignment (with ;)]
Re (ReturnExpression)   [Return statement (with ;)]
Cc (CleanupCall)        [Call to the cleanup sequence (with ;)]
Ce (CleanupExpr)        [Definition of the cleanup sequence - must be at the end of a function (with ;)]
Ie (IdExpr)             [Expression that can be assigned as if it is an id]
Le (LitExpr)            [Literal expression, int, string, char]
Pe (ParenExpr)          [Parenthetical Expression]
Ue (UnaryExpr)          [Expression with a unary operator in front]
Be (BinaryExpr)         [A NonBinExpr or a NonBinExpr, a binary operator, and a BinaryExpr]
~~Fc (FuncCall)           [An id followed by Args]~~ This will count as an IdExpr
If (IfExpr)             
Ife (IfElse)
Ul (UnlExpr)
Ule (UnlElse)
We (WhileExpr)
Dw (DoWhile)
U (UnaryOp)             [!, -, *, @ (the reference operator)]
B (BinOp)               [+, -, *, /, &&, ||, &, |, ^, ==, !=, >, >=, <, <=]


Terminals:
id
num
str
char
if
unless
else
(
)
{
}
[
]
;
,
=
import
return
do
while
break
continue
struct

+
-
*
/
&&
||
&
|
^
==
!=
>=
<
<=
!
@


Grammar:
# Program
S' -> Is
I -> F
I -> S
I -> Im
F -> V Vsp E
S -> struct id { Vs }
Im -> import P
P -> Fi
P -> Fi / P
P -> id :/ P
Fi -> id
Fi -> id . id
V -> Te id

# Lists
Is -> I Is
Is -> I

Es -> E, Es
Es -> E
A -> ()
A -> (Es)

Vs -> V, Vs
Vs -> V
Vsp -> ()
Vsp -> (Vs)

# Statements
E2 -> E E2      # 2 expressions in a row will sometimes pass the grammar
E2 -> E         # checker (and it should be allowed, since statements are
                # expressions), but if the first is not a statement 
                # expression, it will be caught by the expander.

# Expressions
E -> Be         # Since NonBinExpr work as BinaryExpr
E -> E;

Nbe -> Ble
Nbe -> Ae
Nbe -> Va
Nbe -> Re
Nbe -> Cc
Nbe -> Ce
Nbe -> Ie
Nbe -> Le
Nbe -> Pe
Nbe -> Ue
Nbe -> If
Nbe -> Ife
Nbe -> Ul
Nbe -> Ule
Nbe -> We
Nbe -> Dw

Te -> id
Te -> Te[num]
Te -> @(Te)     # @ is the reference operator

Ble -> { E2 }
Ae -> Ie = E;
Va -> V = E;
Re -> return;
Re -> return Expr;
Cc -> cleanup;
Ce -> cleanup Expr;
Ie -> E[E]      # If this is illegal, it will be caught by the expander.
Ie -> E(Es)     # Parenthetical indexing causes bounds checking at runtime.
Ie -> E()
Ie -> id
Ie -> @Ie
Pe -> ( E )
Ue -> U Nbe
Be -> Nbe B Be
Be -> Nbe
If -> if E { E }
Ife -> if E { E } else { E }
Ul -> unless E { E }
Ule -> unless E { E } else { E }
We -> while E { E }
Dw -> do { E } while E;


# Literals
Le -> num
Le -> str
Le -> char
Nbe -> break
Nbe -> continue

# Operators
B -> +
B -> -
B -> *
B -> /
B -> &&
B -> ||
B -> &
B -> |
B -> ^
B -> ==
B -> !=
B -> >
B -> >=
B -> <
B -> <=
U -> !
U -> *
U -> &
U -> -
